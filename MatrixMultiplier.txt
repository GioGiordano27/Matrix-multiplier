#260985186 Giordano Di Marzio
# TODO: ADD OTHER COMMENTS YOU HAVE HERE AT THE TOP OF THIS FILE
# TODO: SEE LABELS FOR PROCEDURES YOU MUST IMPLEMENT AT THE BOTTOM OF THIS FILE

.data
TestNumber:	.word 2		# TODO: Which test to run!
				# 0 compare matrices stored in files Afname and Bfname
				# 1 test Proc using files A through D named below
				# 2 compare MADD1 and MADD2 with random matrices of size Size
				
Proc:		MADD2		# Procedure used by test 2, set to MADD1 or MADD2		
				
Size:		.word 64		# matrix size (MUST match size of matrix loaded for test 0 and 1)

Afname: 	.asciiz "A64.bin"
Bfname: 	.asciiz "B64.bin"
Cfname:		.asciiz "C64.bin"
Dfname:	 	.asciiz "D64.bin"

#################################################################
# Main function for testing assignment objectives.
# Modify this function as needed to complete your assignment.
# Note that the TA will ultimately use a different testing program.
.text
main:		la $t0 TestNumber
		lw $t0 ($t0)
		beq $t0 0 compareMatrix
		beq $t0 1 testFromFile
		beq $t0 2 compareMADD
		li $v0 10 # exit if the test number is out of range
        		syscall	

compareMatrix:	la $s7 Size	
		lw $s7 ($s7)		# Let $s7 be the matrix size n

		move $a0 $s7
		jal mallocMatrix		# allocate heap memory and load matrix A
		move $s0 $v0		# $s0 is a pointer to matrix A
		la $a0 Afname
		move $a1 $s7
		move $a2 $s7
		move $a3 $s0
		jal loadMatrix
	
		move $a0 $s7
		jal mallocMatrix		# allocate heap memory and load matrix B
		move $s1 $v0		# $s1 is a pointer to matrix B
		la $a0 Bfname
		move $a1 $s7
		move $a2 $s7
		move $a3 $s1
		jal loadMatrix
	
		move $a0 $s0
		move $a1 $s1
		move $a2 $s7
		jal check
		
		li $v0 10      	# load exit call code 10 into $v0
        		syscall         	# call operating system to exit	

testFromFile:	la $s7 Size	
		lw $s7 ($s7)		# Let $s7 be the matrix size n

		move $a0 $s7
		jal mallocMatrix		# allocate heap memory and load matrix A
		move $s0 $v0		# $s0 is a pointer to matrix A
		la $a0 Afname
		move $a1 $s7
		move $a2 $s7
		move $a3 $s0
		jal loadMatrix
	
		move $a0 $s7
		jal mallocMatrix		# allocate heap memory and load matrix B
		move $s1 $v0		# $s1 is a pointer to matrix B
		la $a0 Bfname
		move $a1 $s7
		move $a2 $s7
		move $a3 $s1
		jal loadMatrix
	
		move $a0 $s7
		jal mallocMatrix		# allocate heap memory and load matrix C
		move $s2 $v0		# $s2 is a pointer to matrix C
		la $a0 Cfname
		move $a1 $s7
		move $a2 $s7
		move $a3 $s2
		jal loadMatrix
	
		move $a0 $s7
		jal mallocMatrix		# allocate heap memory and load matrix A
		move $s3 $v0		# $s3 is a pointer to matrix D
		la $a0 Dfname
		move $a1 $s7
		move $a2 $s7
		move $a3 $s3
		jal loadMatrix		# D is the answer, i.e., D = AB+C 
	
		# TODO: add your testing code here
		move $a0, $s0	# A
		move $a1, $s1	# B
		move $a2, $s2	# C
		move $a3, $s7	# n
		
		la $ra ReturnHere
		la $t0 Proc	# function pointer
		lw $t0 ($t0)	
		jr $t0		# like a jal to MADD1 or MADD2 depending on Proc definition

ReturnHere:	move $a0 $s2	# C
		move $a1 $s3	# D
		move $a2 $s7	# n
		jal check	# check the answer

		li $v0, 10      	# load exit call code 10 into $v0
	        	syscall         	# call operating system to exit	

compareMADD:	la $s7 Size
		lw $s7 ($s7)	# n is loaded from Size
		mul $s4 $s7 $s7	# n^2
		sll $s5 $s4 2	# n^2 * 4

		move $a0 $s5
		li   $v0 9	# malloc A
		syscall	
		move $s0 $v0
		move $a0 $s5	# malloc B
		li   $v0 9
		syscall
		move $s1 $v0
		move $a0 $s5	# malloc C1
		li   $v0 9
		syscall
		move $s2 $v0
		move $a0 $s5	# malloc C2
		li   $v0 9
		syscall
		move $s3 $v0	
	
		move $a0 $s0	# A
		move $a1 $s4	# n^2
		jal  fillRandom	# fill A with random floats
		move $a0 $s1	# B
		move $a1 $s4	# n^2
		jal  fillRandom	# fill A with random floats
		move $a0 $s2	# C1
		move $a1 $s4	# n^2
		jal  fillZero	# fill A with random floats
		move $a0 $s3	# C2
		move $a1 $s4	# n^2
		jal  fillZero	# fill A with random floats

		move $a0 $s0	# A
		move $a1 $s1	# B
		move $a2 $s2	# C1	# note that we assume C1 to contain zeros !
		move $a3 $s7	# n
		jal MADD1

		move $a0 $s0	# A
		move $a1 $s1	# B
		move $a2 $s3	# C2	# note that we assume C2 to contain zeros !
		move $a3 $s7	# n
		jal MADD2

		move $a0 $s2	# C1
		move $a1 $s3	# C2
		move $a2 $s7	# n
		jal check	# check that they match
	
		li $v0 10      	# load exit call code 10 into $v0
        		syscall         	# call operating system to exit	

###############################################################
# mallocMatrix( int N )
# Allocates memory for an N by N matrix of floats
# The pointer to the memory is returned in $v0	
mallocMatrix: 	mul  $a0, $a0, $a0	# Let $s5 be n squared
		sll  $a0, $a0, 2		# Let $s4 be 4 n^2 bytes
		li   $v0, 9		
		syscall			# malloc A
		jr $ra
	
###############################################################
# loadMatrix( char* filename, int width, int height, float* buffer )
.data
errorMessage: .asciiz "FILE NOT FOUND" 
.text
loadMatrix:	mul $t0 $a1 $a2 	# words to read (width x height) in a2
		sll $t0 $t0  2	  	# multiply by 4 to get bytes to read
		li $a1  0     		# flags (0: read, 1: write)
		li $a2  0     		# mode (unused)
		li $v0  13    		# open file, $a0 is null-terminated string of file name
		syscall
		slti $t1 $v0 0
		beq $t1 $0 fileFound
		la $a0 errorMessage
		li $v0 4
		syscall		  	# print error message
		li $v0 10         	# and then exit
		syscall		
fileFound:	move $a0 $v0     	# file descriptor (negative if error) as argument for read
  		move $a1 $a3     	# address of buffer in which to write
		move $a2 $t0	  	# number of bytes to read
		li  $v0 14       	# system call for read from file
		syscall           	# read from file
		# $v0 contains number of characters read (0 if end-of-file, negative if error).
                	# We'll assume that we do not need to be checking for errors!
		# Note, the bitmap display doesn't update properly on load, 
		# so let's go touch each memory address to refresh it!
		move $t0 $a3	# start address
		add $t1 $a3 $a2  	# end address
loadloop:	lw $t2 ($t0)
		sw $t2 ($t0)
		addi $t0 $t0 4
		bne $t0 $t1 loadloop		
		li $v0 16	# close file ($a0 should still be the file descriptor)
		syscall
		jr $ra	

##########################################################
# Fills the matrix $a0, which has $a1 entries, with random numbers
fillRandom:	li $v0 43
		syscall		# random float, and assume $a0 unmodified!!
		swc1 $f0 0($a0)
		addi $a0 $a0 4
		addi $a1 $a1 -1
		bne  $a1 $zero fillRandom
		jr $ra

##########################################################
# Fills the matrix $a0 , which has $a1 entries, with zero
fillZero:	sw $zero 0($a0)	# $zero is zero single precision float
		addi $a0 $a0 4
		addi $a1 $a1 -1
		bne  $a1 $zero fillZero
		jr $ra



######################################################
# TODO: void subtract( float* A, float* B, float* C, int N )  C = A - B 
subtract: 	mult $a3 $a3 # in order to get the total number of elements in the matrix
		mflo $t0
		
		move $t7 $a2 
		
substractionLoop:	beqz $t0 substractionEnd # check to see if we are done iterating
			lwc1 $f1($a0)
			lwc1 $f2 ($a1)
			
			sub.s $f3 $f1 $f2 # we calculate the difference
			swc1 $f3 ($a2) # then we store it
			
			addi $a0 $a0 4 # move to the next element for A,B and C
			addi $a1 $a1 4
			addi $a2 $a2 4
			
			subi $t0 $t0 1 
			
			j substractionLoop
	
substractionEnd:

		move $a2 $t7 
		jr $ra

#################################################
# TODO: float frobeneousNorm( float* A, int N )
frobeneousNorm: 	mult $a1 $a1
			mflo $t0 
			mtc1 $zero $f0 # set f0 to zero

frobeneousLoop:		beqz $t0 frobeneousEnd # check to see if the iteration is done
			
			lwc1 $f1 ($a0)
			mul.s $f2 $f1 $f1  # calculate the frobeneous norm as given
			add.s $f0 $f0 $f2
			
			addi $a0 $a0 4 # move down one element
			subi $t0 $t0 1
			
			j frobeneousLoop
		
frobeneousEnd:		sqrt.s $f0 $f0 # finally square root the entirety to obtain the frobenenous norm
			jr $ra


#################################################
# TODO: void check ( float* C, float* D, int N )
# Print the forbeneous norm of the difference of C and D
check: 		subi $sp $sp 4 
		sw $ra ($sp) # we store the return addresss 
		move $a3 $a2 # move the current contents of the registers into the valid ones
		move $a2 $a0
		
		jal subtract # go to substract to find C and D
		
		move $a0 $a2 
		move $a1 $a3
		
		jal frobeneousNorm # go to forbeneousNorm to find C and D
		
		li $v0,2 	# we want to print the frobeenousNorm
		mov.s $f12 $f0
		syscall
		
		lw $ra ($sp)  
		addi $sp $sp 4
		
		jr $ra

##############################################################
# TODO: void MADD1( float*A, float* B, float* C, N )
MADD1:		li $t0 -1 # in order to start at index 0, we need to increment 1 to -1
		li $t7 4 	
		

Loop1.1:	addi $t0 $t0 1  
		beq $t0 $a3 End1
		li $t1 -1 # reset the counter
		
Loop1.2:	addi $t1 $t1 1
		beq $t1 $a3 Loop1.1
		li $t2 -1 # reset the counter

Loop1.3:	addi $t2 $t2 1
		beq $t2 $a3 Loop1.2
		
		mul $t4 $t0 $a3 #I define t4,t5,t6 to be the index for matrices A,B and C
		add $t4 $t4 $t1
		mul $t4 $t4 $t7
		add $t4 $t4 $a2
		
		mul $t5 $t0 $a3 
		add $t5 $t5 $t2 # same principle for each
		mul $t5 $t5 $t7 
		add $t5 $t5 $a0
		
		mul $t6 $t2 $a3
		add $t6 $t6 $t1 
		mul $t6 $t6 $t7
		add $t6 $t6 $a1
		
		lwc1 $f0 ($t4) # this is to load all three matrices
		lwc1 $f1 ($t5)
		lwc1 $f2 ($t6)
		
		mul.s $f3 $f2 $f1
		add.s $f0 $f0 $f3
		swc1 $f0($t4)
		
		j Loop1.3
End1:
		jr $ra

#########################################################
# TODO: void MADD2( float*A, float* B, float* C, N )

# The logic of the code used in MADD2 is very similar to that used in MADD1 all while following 
# the given instructions

MADD2: 		li $t0 -4 #same logic but to start at the first element
		mtc1 $zero $f9

Loop2.1:	addi $t0 $t0 4
		bge $t0 $a3 End2
		li $t1 -4 # reset the inner loop counter

Loop2.2:	addi $t1 $t1 4
		bge $t1 $a3 Loop2.1
		li $t2 -1 # reset the inner loop counter
		
Loop2.3:	addi $t2 $t2 1
		beq $t2 $a3 Loop2.2
		
		li $t3 -1 # reset the inner loop counter
		
		subi $t3 $t0 1
		addi $t5 $t0 4
		blt $t5 $a3 skip1 
		move $t5 $a3
skip1:

Loop2.4:	mul $t7 $t2 $a3 
		add $t7 $t7 $t3 
		mul $t7 $t7 4
		add $t7 $t7 $a2
		
		lwc1 $f3($t7)
		add.s $f3 $f3 $f9
		swc1 $f3 ($t7)
		
		mtc1 $zero $f9 # setting the sum back to zero 
		
		addi $t3 $t3 1
		bge $t3 $t5 Loop2.3
		subi $t4 $t1 1
		
		addi $t6 $t1 4 # finding the minimum value inside the for loop
		blt $t6 $a3 skip2
		move $t6 $a3

skip2:		

		
Loop2.5:	addi $t4 $t4 1
		bge $t4 $t6 Loop2.4
		
		mul $t8 $t2 $a3 # t8 and t9 act as the indexes of matrixes A and B 
		add $t8 $t8 $t4
		mul $t8 $t8 4
		add $t8 $t8 $a0
		
		mul $t9 $t4 $a3
		add $t9 $t9 $t3
		mul $t9 $t9 4
		add $t9 $t9 $a1
		
		lwc1 $f0 ($t8) # loads the matrices 
		lwc1 $f1 ($t9)
		
		mul.s $f2 $f0 $f1
		add.s $f9 $f9 $f2
		
		j Loop2.5 

End2:		
		jr $ra

